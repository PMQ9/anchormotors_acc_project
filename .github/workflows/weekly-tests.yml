name: Weekly Automated Tests

on:
  # Run every Monday at 9:00 AM UTC
  schedule:
    - cron: '0 9 * * 1'
  # Allow manual trigger from Actions tab
  workflow_dispatch:

# Set minimal permissions needed for this workflow
permissions:
  contents: read

jobs:
  test-single-vehicle:
    name: Single Vehicle Tests
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: R2025b
          products: |
            Simulink
            MATLAB_Report_Generator
            Control_System_Toolbox
            Simulink_Control_Design
            DSP_System_Toolbox

      - name: Run Single Vehicle Tests
        id: single_vehicle_tests
        uses: matlab-actions/run-command@v2
        continue-on-error: true
        with:
          command: |
            cd('test/single_veh_test');
            run_all_single_test;

      # NEW: Set up Python and extract metrics from PDF
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PDF dependencies
        run: pip install pdfplumber

      - name: Extract metrics from Single Vehicle PDF
        id: extract_single_metrics
        shell: bash
        run: |
          # Find the generated PDF (pattern matches test_report_*.pdf)
          PDF=$(ls test/single_veh_test/results/test_report_*.pdf | head -n 1)
          if [ -z "$PDF" ]; then
            echo "No PDF report found!"
            exit 1
          fi
          
          # Run Python script and source outputs to GITHUB_ENV
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < <(python .github/scripts/extract_pdf_report_metrics.py "$PDF")

      - name: Upload Single Vehicle Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: single-vehicle-test-results
          path: test/single_veh_test/results/
          retention-days: 30

      - name: Send logs to Grafana Loki
        if: always()
        env:
          LOKI_URL: ${{ secrets.GRAFANA_LOKI_URL }}
          LOKI_USER: ${{ secrets.GRAFANA_LOKI_USERNAME }}
          LOKI_KEY: ${{ secrets.GRAFANA_LOKI_API_KEY }}
        shell: bash
        run: |
          # Only send logs if Grafana Loki is configured
          if [ -z "$LOKI_URL" ]; then
            echo "Grafana Loki not configured, skipping logs"
            exit 0
          fi

          # Get current timestamp in nanoseconds
          TIMESTAMP=$(date +%s%N)

          # Create log message
          MESSAGE="Test completed: single-vehicle tests ${{ steps.single_vehicle_tests.outcome }} total=${{ env.total_tests }} passed=${{ env.passed }} passed_w_warnings=${{ env.passed_with_warnings }} failed=${{ env.failed }}"
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\n/\\n/g')

          # Create Loki push payload
          cat <<EOF | curl -X POST "$LOKI_URL" \
            -u "$LOKI_USER:$LOKI_KEY" \
            -H "Content-Type: application/json" \
            --data-binary @- || echo "Failed to send logs to Grafana Loki"
          {
            "streams": [
              {
                "stream": {
                  "job": "github-actions",
                  "workflow": "weekly-tests",
                  "test_type": "single-vehicle",
                  "repository": "${{ github.repository }}",
                  "branch": "${{ github.ref_name }}",
                  "event": "${{ github.event_name }}",
                  "status": "${{ steps.single_vehicle_tests.outcome }}"
                },
                "values": [
                  ["$TIMESTAMP", "$ESCAPED_MESSAGE"]
                ]
              }
            ]
          }
          EOF

      - name: Check for test failures
        if: failure()
        run: echo "Single vehicle tests failed!"

  test-multi-vehicle:
    name: Multi Vehicle Tests
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: R2025b
          release: R2025a
          products: |
            Simulink
            MATLAB_Report_Generator
            Control_System_Toolbox
            Simulink_Control_Design
            DSP_System_Toolbox

      - name: Run Multi Vehicle Tests
        id: multi_vehicle_tests
        uses: matlab-actions/run-command@v2
        continue-on-error: true
        with:
          command: |
            cd('test/multi_veh_test');
            run_all_multi_test;

      # NEW: Set up Python and extract metrics from PDF
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PDF dependencies
        run: pip install pdfplumber

      - name: Extract metrics from Multi Vehicle PDF
        id: extract_multi_metrics
        shell: bash
        run: |
          # Find the generated PDF (pattern matches test_report_*.pdf)
          PDF=$(ls test/multi_veh_test/results/test_report_*.pdf | head -n 1)
          if [ -z "$PDF" ]; then
            echo "No PDF report found!"
            exit 1
          fi
          
          # Run Python script and source outputs to GITHUB_ENV
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < <(python .github/scripts/extract_pdf_report_metrics.py "$PDF")

      - name: Upload Multi Vehicle Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: multi-vehicle-test-results
          path: test/multi_veh_test/results/
          retention-days: 30

      - name: Send logs to Grafana Loki
        if: always()
        env:
          LOKI_URL: ${{ secrets.GRAFANA_LOKI_URL }}
          LOKI_USER: ${{ secrets.GRAFANA_LOKI_USERNAME }}
          LOKI_KEY: ${{ secrets.GRAFANA_LOKI_API_KEY }}
        shell: bash
        run: |
          # Only send logs if Grafana Loki is configured
          if [ -z "$LOKI_URL" ]; then
            echo "Grafana Loki not configured, skipping logs"
            exit 0
          fi

          # Get current timestamp in nanoseconds
          TIMESTAMP=$(date +%s%N)

          # Create log message
          MESSAGE="Test completed: multi-vehicle tests ${{ steps.multi_vehicle_tests.outcome }} total=${{ env.total_tests }} passed=${{ env.passed }} passed_w_warnings=${{ env.passed_with_warnings }} failed=${{ env.failed }}"
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/\n/\\n/g')

          # Create Loki push payload
          cat <<EOF | curl -X POST "$LOKI_URL" \
            -u "$LOKI_USER:$LOKI_KEY" \
            -H "Content-Type: application/json" \
            --data-binary @- || echo "Failed to send logs to Grafana Loki"
          {
            "streams": [
              {
                "stream": {
                  "job": "github-actions",
                  "workflow": "weekly-tests",
                  "test_type": "multi-vehicle",
                  "repository": "${{ github.repository }}",
                  "branch": "${{ github.ref_name }}",
                  "event": "${{ github.event_name }}",
                  "status": "${{ steps.multi_vehicle_tests.outcome }}"
                },
                "values": [
                  ["$TIMESTAMP", "$ESCAPED_MESSAGE"]
                ]
              }
            ]
          }
          EOF

      - name: Check for test failures
        if: failure()
        run: echo "Multi vehicle tests failed!"

  notify-results:
    name: Notify Test Results
    needs: [test-single-vehicle, test-multi-vehicle]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check overall status
        run: |
          if [ "${{ needs.test-single-vehicle.result }}" == "success" ] && [ "${{ needs.test-multi-vehicle.result }}" == "success" ]; then
            echo "All tests passed!"
            exit 0
          else
            echo "Some tests failed!"
            echo "Single Vehicle: ${{ needs.test-single-vehicle.result }}"
            echo "Multi Vehicle: ${{ needs.test-multi-vehicle.result }}"
            exit 1
          fi
